// Raw Pointers
// การอ้างอิงสามารถเปลี่ยนไปเป็น type ตั้งต้นที่เรียกว่า raw pointer ได้ ซึ่งมันมีลักษณะเหมือนเลขปกติที่ คัดลอกได้เคลื่อนที่ได้โดยแทบจะไม่มีข้อจำกัด ซึ่ง Rust จะไม่รับประกันความถูกต้องของตำแหน่งในหน่วยความจำที่มันจะชี้ไปถึง

// raw pointer มีสองแบบ:

// *const T - คือ raw pointer ของข้อมูลจาก type T ที่ไม่ควรมีการเปลี่ยนแปลงเกิดขึ้น
// *mut T - คือ raw pointer ของข้อมูลจาก type T ที่เปลี่ยนแปลงได้
// Raw pointers สามารถแปลงค่าไปเป็นตัวเลขและแปลงกลับได้ (เช่น usize)

// Raw pointers สามารถเข้าถึงข้อมูลได้ด้วยการใช้ unsafe (กล่าวเพิ่มเติมภายหลัง)

// รายละเอียดหน่วยความจำ:

// การอ้างอิงใน Rust มีความคล้ายกับพอยเตอร์ในภาษา C มากในแง่ของการใช้งาน แต่จะมีข้อจำกัดมากหน่อยในช่วง compile time ที่ต้องคิดว่าจะจัดเก็บมันอย่างไร และจะย้ายไปฟังก์ชันอื่นอย่างไร
// raw pointer ของ Rust นั้นคล้ายกับพอยเตอร์ของภาษา C ตรงที่มันแสดงตัวเป็นตัวเลขปกติ ทำให้สามารถคัดลอกหรือส่งต่อไปที่อื่นได้ แถมยังเอาไปเข้ากระบวนการทางคณิตศาสตร์ เพื่อแก้ค่าได้ เรียกว่า pointer math

fn main() {
    let a = 42;
    let memory_location = &a as *const i32 as usize;
    println!("Data is here {}", memory_location);
}
